<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>yan-frame-parent</artifactId>
        <groupId>com.yan</groupId>
        <version>1.0-version</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>yan-frame-resource</artifactId>
    <packaging>jar</packaging>



  <properties>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
      <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>3.8.1</version>
          <scope>test</scope>
      </dependency>

      <dependency>
          <groupId>com.yan</groupId>
          <artifactId>yan-frame-common</artifactId>
      </dependency>

  </dependencies>


    <build>

        <resources>
            <resource>
                <!-- 资源路径，原生maven工程其实不需要单独设置，java工程转换而来的需要设置，否则找不到，
                    因为maven是典型的约定编程，遵循约定优于配置 -->
                <directory>dbproperties</directory>

                <!-- 资源打包后在jar中的路径，这里比较坑爹，之前没设置，结果生成到了jar的根路径下，
                    而在访问的时候仍然使用的是directory的路径 -->
                <targetPath>dbproperties</targetPath>
            </resource>
        </resources>
    </build>

</project>
