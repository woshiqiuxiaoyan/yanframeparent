<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">


    <!--静态资源解析-->
    <mvc:resources mapping="/static/js/**" location="/static/js/" />
    <mvc:resources mapping="/uploadimages/**" location="/uploadimages/" />
    <mvc:resources mapping="/static/layui/**" location="/static/layui/" />
    <mvc:resources mapping="/static/css/**" location="/static/css/" />
    <mvc:resources mapping="/static/images/**" location="/static/images/" />
    <mvc:resources mapping="/html/admin/static/**" location="/html/admin/static/" />

    <!--
   开启Shiro的注解(如@RequiresRoles，@RequiresPermissions)，需借助SpringAOP扫描使用Shiro注解的类，
   并在必要时进行安全逻辑验证
-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"></bean>

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"></property>
    </bean>



    <!--启用注解驱动来扫描controller 包含了 映射器 和 适配器  conversionService自定义类型转换器 validator 自定义validator  -->
    <mvc:annotation-driven conversion-service="conversionService" validator="validator" >

        <mvc:argument-resolvers>
            <bean class="myhandlermethodargumentresolver.CurrentUserHandlerMethodArgumentResolver"></bean>
        </mvc:argument-resolvers>

        <!--配置@ResponseBody由fastjson解析-->
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" />
                <property name="defaultCharset" value="UTF-8"/>
            </bean>

            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                        <value>application/*+json;charset=UTF-8</value>
                        <value>text/html;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>


    </mvc:annotation-driven>


    <bean id="fastJsonpResponseBodyAdvice" class="com.alibaba.fastjson.support.spring.FastJsonpResponseBodyAdvice">
        <constructor-arg>
            <list>
                <value>callback</value>
                <value>jsonp</value>
            </list>
        </constructor-arg>
    </bean>




    <!-- 处理器 -->
    <!-- springmvc的配置文件中不扫描带有@Service注解的类 -->
    <context:component-scan base-package="system.controller,user.controller,converter">
        <!--排除service-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan>




    <!--视图解析器  InternalResourceView，利用它来展现jsp （实现了jstlview） 以后要前后台分离 换一个视图解析器 -->
   <!-- <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/pages/" />
        <property name="suffix" value=".jsp" />
    </bean>-->

    <!--bean视图解析 返回 json用-->
    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver" >
        <property name="order" value="10" />
    </bean>



    <!--springMVC+thymeleaf的跳转页面配置-->
    <bean id="templateResolver"
          class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
        <constructor-arg ref="servletContext"/>
        <property name="prefix" value="/html/" />
        <property name="suffix" value=".html" />
        <property name="templateMode" value="HTML5" />
        <property name="cacheable" value="false" />
        <property name="characterEncoding" value="utf-8" />
    </bean>

    <bean id="templateEngine"
          class="org.thymeleaf.spring4.SpringTemplateEngine">
        <property name="templateResolver" ref="templateResolver" />
    </bean>

    <bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">
        <property name="templateEngine" ref="templateEngine" />
        <property name="characterEncoding" value="utf-8" />
    </bean>
    <!--**********************************************thymeleaf结束**********************************************-->

    <!--自定义参数绑定-->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!--转换器-->
        <property name="converters">
            <set>
                <!-- 日期转化换类 -->
                <ref bean="customDateTimeConverter" />
            </set>
        </property>
    </bean>






    <!-- 以下 validator  ConversionService 在使用 mvc:annotation-driven 会 自动注册-->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <!--校验器-->
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>


    <!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找  -->
                <value>classpath:message/messages</value>
                <value>classpath:message/ValidationMessages</value>
            </list>
        </property>
        <property name="useCodeAsDefaultMessage" value="false"/>
        <property name="defaultEncoding" value="utf-8"/>
        <property name="cacheSeconds" value="60"/>
    </bean>


    <!--废弃 使用BaseController  @ExceptionHandler注解实现异常处理 替代-->
    <!--
    &lt;!&ndash;全局异常处理器 实现了spring 的handlerExceptionResolver接口 &ndash;&gt;
    <bean class="com.system.exception.CustomExceptionResolver"></bean>
    -->

    <!--文件上传-->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="209715200" />
        <property name="defaultEncoding" value="UTF-8" />
        <property name="resolveLazily" value="true" />
    </bean>


    <!--拦截器配置-->
    <mvc:interceptors>
        <!--可以配置多个顺序执行 -->
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="interceptor.CustomerHandlerInterceptor"></bean>
        </mvc:interceptor>

        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="interceptor.CustomerForAnnotationHandlerInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>


    <!--增加redis技持-->
    <bean id="jedisConnFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:use-pool="true"/>

    <!-- redis template definition -->
    <bean id="redisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate"
          p:connection-factory-ref="jedisConnFactory"/>

</beans>